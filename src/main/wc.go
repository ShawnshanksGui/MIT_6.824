package main

import (
	"fmt"
	"mapreduce"
	"os"
	"unicode"
	"strings"
	"strconv"
)

//
// The map function is called once for each file of input. The first
// argument is the name of the input file, and the second is the
// file's complete contents. You should ignore the input file name,
// and look only at the contents argument. The return value is a slice
// of key/value pairs.
//
func mapF(filename string, contents string) []mapreduce.KeyValue {
	// Your code here (Part II).
	//============================================================
	//written by Shawnshanks, starting in 20180815.pm
	allStrings := strings.Fields(contents)

	var res []mapreduce.KeyValue
	/*	
	for _, oneString := range allStrings {
		var IsL int = 1
		for _, letter := range oneString {
			if !unicode.IsLetter(letter) {
				IsL = 0;
			}	 
		}
		if 1 == IsL {
			kv := mapreduce.KeyValue{oneString, string(1)}
			res = append(res, kv)
		}
	}
	*/
	for _, oneString := range allStrings {

		var subword []byte
		var cnt int = 0
	//	var AlreadyAppend int = 0
		//**part one***
		for i, letter := range oneString {
			if 0 == cnt {
				if unicode.IsLetter(letter) {
					subword = append(subword, oneString[i])
				}
				cnt++
				continue
			}

			if unicode.IsLetter(letter) {
				subword = append(subword, oneString[i])
			} else {
				if len(subword) > 0 {
					kv := mapreduce.KeyValue{string(subword), string(1)}
					res = append(res, kv)

					subword = []byte{}
	//				AlreadyAppend = 1
				}				
			}
		}//for
		//***part two***
		if len(subword) == len(oneString) {
			kv := mapreduce.KeyValue{string(subword), string(1)}
			res = append(res, kv)				
		} else {
			if len(subword) > 0 {
				kv := mapreduce.KeyValue{string(subword), string(1)}
				res = append(res, kv)
			}//if
		}//else
	}//for

	return res
}

//
// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
//
func reduceF(key string, values []string) string {
	// Your code here (Part II).
	//============================================================
	//written by Shawnshanks, starting in 20180815.pm
/*
	var times_total int = 0
	for _, oneString := range values {
		times, err := strconv.Atoi(string(oneString))
		if err != nil {fmt.Println("error", err)}
			
		times_total += times
	}
	return strconv.Itoa(times_total)
*/
	times_total := len(values)
	return strconv.Itoa(times_total)
}

// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)
// 2) Master (e.g., go run wc.go master localhost:7777 x1.txt .. xN.txt)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
func main() {
	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		var mr *mapreduce.Master
		if os.Args[2] == "sequential" {
			mr = mapreduce.Sequential("wcseq", os.Args[3:], 3, mapF, reduceF)
		} else {
			mr = mapreduce.Distributed("wcseq", os.Args[3:], 3, os.Args[2])
		}
		mr.Wait()
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], mapF, reduceF, 100, nil)
	}
}
